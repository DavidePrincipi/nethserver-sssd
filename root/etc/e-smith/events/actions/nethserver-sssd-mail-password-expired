#!/usr/bin/perl

#
# NethServer
#
#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use Env qw(LANG);

use esmith::AccountsDB;
use esmith::ConfigDB;
use esmith::templates;
use MIME::Entity;
use Encode;

my $eventName = shift;
my $userName = shift;
my $expireTimestamp = shift;
my $errors = 0;

#
# Fetch mail message recipients by expanding
# password-expired/recipients template
#
sub expandRecipientAddresses($)
{
    my $userRecord = shift;
    my $recipients = esmith::templates::processTemplate({
	'MORE_DATA' => { userRecord => $userRecord },
	'OUTPUT_TYPE' => 'string',
	'TEMPLATE_PATH' => 'password-expired/recipients'
    });

    $recipients =~ s/[\s,]+/ /s;
    return grep { $_ ne '' } split(' ', $recipients);
}


# nothing to do if the password has expired.
if($expireTimestamp < time()) {
    exit(0);
}

my $accountsDb = esmith::AccountsDB->open_ro() or die("Could not open AccountsDB");
my $configDb = esmith::ConfigDB->open_ro() or die("Could not open ConfigDB");
my $userRecord = $accountsDb->get($userName) or die("Could not find $userName account");

if($userRecord->prop('type') ne 'user') {
    die("$userName is not a user account");
}

my @recipientAddresses = expandRecipientAddresses($userRecord);
if( ! @recipientAddresses) {
    exit(0);
}

my $lang = $userRecord->prop('Lang') || $configDb->get_prop('sysconfig', 'DefaultLanguage') || 'en_US.utf8';

#
# Expand the localised message template
#
$ENV{LANG} = $lang;
$ENV{ttycharset}= 'UTF-8';

foreach my $recipientAddress (@recipientAddresses) {

    my $message = esmith::templates::processTemplate({
	'MORE_DATA' => {
	    lang => $lang,
	    userRecord => $userRecord,
	    expireTimestamp => $expireTimestamp,
	    recipientAddress => $recipientAddress,
	},
	'OUTPUT_TYPE' => 'string',
	'TEMPLATE_PATH' => 'password-expired'
    });
    
    # pipe message to mailx command:
    if( ! open(SMH, '| /bin/mailx -t')) {
       warn $!;
       $errors ++;
       next;
    }

    # the raw UTF-8 message 
    print SMH $message;
    
    close(SMH);
    
}

exit($errors == 0 ? 0 : 1);
