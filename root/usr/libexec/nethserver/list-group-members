#!/usr/bin/perl

#
# Copyright (C) 2016 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use NethServer::SSSD;
use NethServer::Password;
use Sys::Hostname;
use Net::LDAP;
use Getopt::Std;
use JSON;

our $opt_A;
our $opt_s;

#
# Invocation flags:
#    -A      list all groups returned by LDAP server. If not specified items listed in /etc/nethserver/system-groups are hidden
#    -s      strip the @domain suffix from users and groups
#
getopts('As');

my ($systemName, $domainName) = split(/\./, Sys::Hostname::hostname(), 2);
my $sssd = NethServer::SSSD->new();
my $groupName = shift;

$groupName =~ s/\@$domainName$//; #trim @domain suffix

my @systemGroups = ();
my @systemUsers = ();

if( ! $opt_A) {
    open(FH, '<', '/etc/nethserver/system-groups');
    chomp(@systemGroups = <FH>);
    close(FH);
    @systemGroups = map { lc($_) } @systemGroups;

    open(FH, '<', '/etc/nethserver/system-users');
    chomp(@systemUsers = <FH>);
    close(FH);
    @systemUsers = map { lc($_) } @systemUsers;
}

my %config = (
    'bindDN' => $sssd->bindDN(),
    'bindPassword' => $sssd->bindPassword(),
);

if($sssd->isLdap()) {
    if($sssd->isLocalProvider()) {
        $config{'bindDN'} = 'cn=libuser,dc=directory,dc=nh';
        $config{'bindPassword'} = NethServer::Password->new('libuser')->getAscii();
    }

    %config = ( %config,
        'userkeyattr' => 'uid',
        'groupkeyattr' => 'cn',
        'memberattr' => 'memberUid',
        'filter' => "(&(objectClass=posixGroup)(cn=$groupName))",
        'groupclass' => 'posixGroup',
        'memberfilter' => '(objectClass=shadowAccount)'
    );

} elsif($sssd->isAD()) {
    %config = ( %config,
        'userkeyattr' => 'sAMAccountName',
        'groupkeyattr' => 'sAMAccountName',
        'memberattr' => 'member',
        'filter' => "(&(objectClass=group)(sAMAccountName=$groupName))",
        'groupclass' => 'group',
        'memberfilter' => '(objectClass=*)',
    );
}

my $exitCode = 0;
my $result;

my $ldap_error_handler = sub {
    my $message = shift;
    if($message && $message->is_error()) {
        my $code = $message->code();
        my $text = $message->error();
        if($code == 4) {
            warn "[WARNING] (code $code): $text\n";
            $exitCode = $code;
            return $message;
        }
        warn "[ERROR] (code $code): $text\n";
        exit($code);
    }
    return $message;
};


my $ldap = Net::LDAP->new($sssd->ldapURI(),
    'timeout' => 30,
    'async' => 0,
    'onerror' => $ldap_error_handler,
    'verify' => 'none',
);

if($sssd->startTls()) {
    $ldap->start_tls('verify' => 'none');
}

$result = $ldap->bind($config{'bindDN'}, 'password' => $config{'bindPassword'});

my $entry = $ldap->search(
    'base' => $sssd->groupDN(),
    'scope' => 'subtree',
    'deref' => 'never',
    'timelimit' => 10,
    'filter' => $config{'filter'},
)->pop_entry();

my @members;

if($entry) {
    foreach ($entry->get_value($config{'memberattr'})) {
        my $member = get_member($_);
        if($member && ! grep { $member eq $_ } @systemGroups, @systemUsers) {
            if($opt_s) {
                push @members, $member;
            } else {
                push @members, "$member\@$domainName";
            }
        }
    }
}

print JSON->new()->encode(\@members);

$ldap->unbind();
$ldap->disconnect();
exit($exitCode);

################################################################################
################################################################################
################################################################################

sub get_member()
{
    my $member = shift;
    my $retval = undef;
    my $scope = 'sub';
    my $filter = undef;

    my $baseDn = undef;
    if($sssd->isAD()) {
        $baseDn = $member;
        $scope = 'base';
        $filter = $config{'memberfilter'};
    } elsif($sssd->isLdap()) {
        $baseDn = $sssd->userDN();
        $filter = "(&$config{'memberfilter'}($config{'userkeyattr'}=$member))";
    }

    my $entry = $ldap->search(
        'base' => $baseDn,
        'scope' => $scope,
        'timeout' => 10,
        'filter' => $filter,
        'deref' => 'never',
    )->pop_entry();

    if( ! $entry) {
        return undef;
    }

    if($entry->get_value('objectClass') eq $config{'groupclass'}) {
        $retval = $entry->get_value($config{'groupkeyattr'});
    } else {
        $retval = $entry->get_value($config{'userkeyattr'});
    }

    return lc($retval);
}

