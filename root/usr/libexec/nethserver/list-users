#!/usr/bin/perl

#
# Copyright (C) 2016 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use NethServer::SSSD;
use NethServer::Password;
use Sys::Hostname;
use Net::LDAP;
use Getopt::Std;
use JSON;

our $opt_A;

#
# Invocation flags:
#    -A      list all users returned by LDAP server. If not specified items listed in /etc/nethserver/system-users are hidden
#
getopts('A');

my ($systemName, $domainName) = split(/\./, Sys::Hostname::hostname(), 2);
my $now = time();
my $sssd = NethServer::SSSD->new();
my @systemUsers = ();

if( ! $opt_A) {
    open(FH, '<', '/etc/nethserver/system-users');
    chomp(@systemUsers = <FH>);
    close(FH);
    @systemUsers = map { lc($_) } @systemUsers;
}

my %config = (
    'bindDN' => $sssd->bindDN(),
    'bindPassword' => $sssd->bindPassword(),
);

if($sssd->isLdap()) {

    if($sssd->isLocalProvider()) {
        $config{'bindDN'} = 'cn=libuser,dc=directory,dc=nh';
        $config{'bindPassword'} = NethServer::Password->new('libuser')->getAscii();
    }

    %config = ( %config,
        'keyattr' => 'uid',
        'filter' => '(objectClass=shadowAccount)',

        'get_expired' => sub { my $entry = shift;
            my $shadowMax = $entry->get_value('shadowMax');
            my $shadowLastChange = $entry->get_value('shadowLastChange');

            if ($shadowMax < 99999) {
                my $t = $shadowLastChange * 24 * 60 * 60;
                my $expire_date = $t + ($shadowMax * 24 * 60 * 60);
                if ($expire_date < $now) {
                    return 1;
                }
            }

            return 0;
        },

        'get_expires' => sub { my $entry = shift;
            my $shadowMax = $entry->get_value('shadowMax');

            if ($shadowMax < 99999) {
                return 'yes';
            }

            return 'no';
        },

        'get_gecos' => sub { my $e = shift;
            return $e->get_value('cn');
        },

        'get_locked' => sub { my $e = shift;
            my $pass = $e->get_value('userPassword');
            if($pass =~ /\{CRYPT\}\!+/) {
                return 1;
            }
            return 0;
        },

        'get_new' => sub { my $e = shift;
            if ($e->get_value('userPassword') eq '{CRYPT}!!') {
                return 1;
            }
            return 0;
        },

        'get_shell' => sub { my $e = shift;
            return $e->get_value('loginShell');
        },
    );

} elsif($sssd->isAD()) {
    #
    # See userAccountControl bit field codes:
    # https://support.microsoft.com/en-us/kb/305144
    #
    %config = ( %config,
        'keyattr' => 'sAMAccountName',
        'filter' => '(&(objectClass=user)(objectCategory=person))',
        'get_expired' => sub { my $e = shift;
            if(int($e->get_value('userAccountControl')) & 0x800000) { # PASSWORD_EXPIRED
                return 1;
            }
            return 0;
        },
        'get_expires' => sub { my $e = shift;
            if(int($e->get_value('userAccountControl')) & 0x10000) { # DONT_EXPIRE_PASSWORD
                return 0;
            }
            return 1;
        },
        'get_gecos' => sub { my $e = shift;
            return $e->get_value('displayName') || $e->get_value('cn');
        },
        'get_locked' => sub { my $e = shift;
            if(int($e->get_value('userAccountControl')) & 0x2) { # ACCOUNTDISABLE
                return 1;
            }
            return 0;
        },
        'get_new' => sub { my $e = shift;
            if($e->get_value('pwdLastSet') eq '0') {
                return 1;
            }
            return 0;
        },
        'get_shell' => sub { my $e = shift;
            return $e->get_value('loginShell') || '/usr/libexec/openssh/sftp-server';
        },
    );
}

my $exitCode = 0;
my $result;

my $ldap_error_handler = sub {
    my $message = shift;
    if($message && $message->is_error()) {
        my $code = $message->code();
        my $text = $message->error();
        warn "[ERROR] (code $code): $text\n";
        exit($code);
    }
    return $message;
};

my $ldap = Net::LDAP->new($sssd->ldapURI(),
    'timeout' => 30,
    'async' => 0,
    'onerror' => $ldap_error_handler,
    'verify' => 'none',
);

if($sssd->startTls()) {
    $ldap->start_tls('verify' => 'none');
}

$result = $ldap->bind($config{'bindDN'}, 'password' => $config{'bindPassword'});

$result = $ldap->search(
    'base' => $sssd->userDN(),
    'scope' => 'subtree',
    'deref' => 'never',
    'timelimit' => 10,
    'filter' => $config{'filter'},
);

print '{';

my $entry;
my $separator = '';
while($entry = $result->pop_entry()) {
    my $key = get_user_key($entry);
    if(grep { $key eq $_ } @systemUsers) {
        next;
    }

    print $separator;
    print JSON->new()->allow_nonref()->encode($key . '@' . $domainName);
    print ":";
    print JSON->new()->encode(get_user_value($entry));
    $separator = ',';
}

print '}';

$ldap->unbind();
$ldap->disconnect();
exit($exitCode);

################################################################################
################################################################################
################################################################################

sub get_user_key()
{
    my $entry = shift;
    return lc($entry->get_value($config{'keyattr'}));
}

sub get_user_value()
{
    my $e = shift;
    return {
        'expired' => $config{'get_expired'}->($e),
        'expires' => $config{'get_expires'}->($e),
        'gecos' => $config{'get_gecos'}->($e),
        'locked' => $config{'get_locked'}->($e),
        'new' => $config{'get_new'}->($e),
        'shell' => $config{'get_shell'}->($e),
        'groups' => []
    };
}
